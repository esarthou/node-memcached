{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-17T05:21:53.162Z",
    "end": "2021-02-17T05:21:53.195Z",
    "duration": 33,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fb3851cc-ea82-4385-9b3a-29ba9d7104f8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1b16b763-802c-49f0-aca7-5e1086c9836b",
          "title": "Node-Memcached Integration tests",
          "fullFile": "/Users/esteban/node-memcached/test/integration.test.js",
          "file": "/test/integration.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "SET a new record and return STORED",
              "fullTitle": "Node-Memcached Integration tests SET a new record and return STORED",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await client.set(testParameters.key, testParameters.initialValue, 900);\n_chai.assert.equal(response, true);",
              "err": {},
              "uuid": "b7b890fd-c782-40f2-801d-4728b5007e75",
              "parentUUID": "1b16b763-802c-49f0-aca7-5e1086c9836b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET the previously created record and match the value",
              "fullTitle": "Node-Memcached Integration tests GET the previously created record and match the value",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await client.get(testParameters.key);\n_chai.assert.equal(response, testParameters.initialValue);",
              "err": {},
              "uuid": "4c138458-57c8-4eb1-a41a-2e62c7f2bd5c",
              "parentUUID": "1b16b763-802c-49f0-aca7-5e1086c9836b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GETS the previously created record match the value and store uniqueCas for later",
              "fullTitle": "Node-Memcached Integration tests GETS the previously created record match the value and store uniqueCas for later",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await client.gets(testParameters.key);\ntestParameters.uniqueCas = response.cas;\n_chai.assert.equal(response[testParameters.key], testParameters.initialValue);",
              "err": {},
              "uuid": "ebf23aea-be60-4eda-8ec9-70ad0ac1af0c",
              "parentUUID": "1b16b763-802c-49f0-aca7-5e1086c9836b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CAS the previously created record",
              "fullTitle": "Node-Memcached Integration tests CAS the previously created record",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await client.cas(testParameters.key, testParameters.casValueInsert, testParameters.uniqueCas, 900);\nconst checkup = await client.get(testParameters.key);\n_chai.assert.ok(response);\n_chai.assert.equal(checkup, testParameters.casValueInsert);",
              "err": {},
              "uuid": "b081d877-3baa-485d-aba3-c8075938d5db",
              "parentUUID": "1b16b763-802c-49f0-aca7-5e1086c9836b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ADD a new record",
              "fullTitle": "Node-Memcached Integration tests ADD a new record",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await client.add(testParameters.addKey, testParameters.addValue, 900);\nconst checkup = await client.get(testParameters.addKey);\n_chai.assert.ok(response);\n_chai.assert.equal(checkup, testParameters.addValue);",
              "err": {},
              "uuid": "72f5d9f4-2618-42a7-8b7c-2542ebd4307e",
              "parentUUID": "1b16b763-802c-49f0-aca7-5e1086c9836b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "REPLACE an old record",
              "fullTitle": "Node-Memcached Integration tests REPLACE an old record",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await client.replace(testParameters.addKey, testParameters.replaceValue, 900);\nconst checkup = await client.get(testParameters.addKey);\n_chai.assert.ok(response);\n_chai.assert.equal(checkup, testParameters.replaceValue);",
              "err": {},
              "uuid": "139f906f-cd2c-40a1-b6de-d8da19903fb2",
              "parentUUID": "1b16b763-802c-49f0-aca7-5e1086c9836b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "APPEND value to a record",
              "fullTitle": "Node-Memcached Integration tests APPEND value to a record",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await client.set('echidna', 'fizz', 900);\nclient.append('echidna', 'buzz').then(async () => {\n  const checkup = await client.get('echidna');\n  _chai.assert.equal(checkup, 'fizzbuzz');\n});",
              "err": {},
              "uuid": "4dd0ab98-86cd-44c7-97cc-eb2ec9cf095c",
              "parentUUID": "1b16b763-802c-49f0-aca7-5e1086c9836b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PREPEND value to a record",
              "fullTitle": "Node-Memcached Integration tests PREPEND value to a record",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await client.set('carpincho', 'bara', 900);\nclient.prepend('carpincho', 'capy').then(async () => {\n  const checkup = await client.get('carpincho');\n  _chai.assert.equal(checkup, 'capybara');\n});",
              "err": {},
              "uuid": "1c2b87bd-5645-4b27-8a9c-3bba001050ad",
              "parentUUID": "1b16b763-802c-49f0-aca7-5e1086c9836b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE a record",
              "fullTitle": "Node-Memcached Integration tests DELETE a record",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await client.set('dead', 'soon', 900);\nconst before = await client.get('dead');\nclient.del('dead').then(async () => {\n  const after = await client.get('dead');\n  _chai.assert.notEqual(before, after);\n});",
              "err": {},
              "uuid": "8f244558-6cea-4a6f-909a-a994d76008cc",
              "parentUUID": "1b16b763-802c-49f0-aca7-5e1086c9836b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7b890fd-c782-40f2-801d-4728b5007e75",
            "4c138458-57c8-4eb1-a41a-2e62c7f2bd5c",
            "ebf23aea-be60-4eda-8ec9-70ad0ac1af0c",
            "b081d877-3baa-485d-aba3-c8075938d5db",
            "72f5d9f4-2618-42a7-8b7c-2542ebd4307e",
            "139f906f-cd2c-40a1-b6de-d8da19903fb2",
            "4dd0ab98-86cd-44c7-97cc-eb2ec9cf095c",
            "1c2b87bd-5645-4b27-8a9c-3bba001050ad",
            "8f244558-6cea-4a6f-909a-a994d76008cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "./test/results/mochawesome"
      },
      "version": "5.1.0"
    }
  }
}